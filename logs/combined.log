{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:35:07"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:35:08"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:35:11"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:35:11"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:37:01"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:37:02"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:39:02"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:39:03"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:39:22"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:39:22"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:39:25"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:39:26"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:39:29"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:39:29"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:39:31"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:39:32"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:39:33"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:39:33"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:39:35"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:39:35"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:39:37"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:39:37"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:39:45"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:39:45"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.student.create()` invocation:\n\n{\n  data: {\n    regNo: \"STU001\",\n    name: \"Rahul Sharma\",\n    className: \"12A\",\n    rollNo: 1,\n    contactNumber: \"9876543210\",\n    status: true,\n+   registrationNo: String\n  }\n}\n\nArgument `registrationNo` is missing.\n    at An (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at zn.handleRequestError (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at zn.handleAndLogRequestError (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at zn.request (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async Object.createStudent (file:///C:/Users/Acer/Desktop/school-management-system/src/services/studentService.js:6:12)\n    at async createStudent (file:///C:/Users/Acer/Desktop/school-management-system/src/controllers/studentController.js:11:21)","timestamp":"2025-04-14 22:47:37"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:51:30"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:51:31"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:51:39"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:51:40"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:51:41"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:51:42"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:51:43"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:51:43"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:52:06"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:52:06"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:52:07"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:52:08"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-14 22:55:08"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-14 22:55:08"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:03:02"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:03:02"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:03:11"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:03:11"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:03:19"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:03:20"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.student.create()` invocation:\n\n{\n  data: {\n    regNo: undefined,\n    name: \"Rahul Sharma\",\n    className: undefined,\n    rollNo: 1,\n    contactNumber: \"9876543210\",\n    status: true,\n+   registrationNo: String\n  }\n}\n\nArgument `registrationNo` is missing.\n    at An (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at zn.handleRequestError (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at zn.handleAndLogRequestError (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at zn.request (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async Object.createStudent (file:///C:/Users/Acer/Desktop/school-management-system/src/services/studentService.js:6:12)\n    at async createStudent (file:///C:/Users/Acer/Desktop/school-management-system/src/controllers/studentController.js:11:21)","timestamp":"2025-04-15 08:03:24"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:04:35"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:04:36"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.student.create()` invocation:\n\n{\n  data: {\n    regNo: \"STU001\",\n    name: \"Rahul Sharma\",\n    className: \"12A\",\n    rollNo: 1,\n    contactNumber: \"9876543210\",\n    status: true,\n+   registrationNo: String\n  }\n}\n\nArgument `registrationNo` is missing.\n    at An (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at zn.handleRequestError (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at zn.handleAndLogRequestError (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at zn.request (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async Object.createStudent (file:///C:/Users/Acer/Desktop/school-management-system/src/services/studentService.js:6:12)\n    at async createStudent (file:///C:/Users/Acer/Desktop/school-management-system/src/controllers/studentController.js:11:21)","timestamp":"2025-04-15 08:05:56"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:07:18"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:07:18"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:08:35"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:08:35"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:09:18"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:09:18"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:09:29"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:09:29"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:09:33"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:09:33"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:09:54"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:09:54"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.student.create()` invocation:\n\n{\n  data: {\n    regregistrationNoNo: \"STU001\",\n    name: \"Rahul Sharma\",\n    class: \"12A\",\n    rollNo: 1,\n    contactNumber: \"9876543210\",\n    status: true,\n+   registrationNo: String\n  }\n}\n\nArgument `registrationNo` is missing.\n    at An (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at zn.handleRequestError (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at zn.handleAndLogRequestError (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at zn.request (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async Object.createStudent (file:///C:/Users/Acer/Desktop/school-management-system/src/services/studentService.js:6:12)\n    at async createStudent (file:///C:/Users/Acer/Desktop/school-management-system/src/controllers/studentController.js:11:21)","timestamp":"2025-04-15 08:10:08"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:14:35"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:14:36"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:14:38"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:14:38"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.student.create()` invocation:\n\n{\n  data: {\n    regregistrationNo: \"STU001\",\n    name: \"Rahul Sharma\",\n    class: \"12A\",\n    rollNo: 1,\n    contactNumber: \"9876543210\",\n    status: true,\n+   registrationNo: String\n  }\n}\n\nArgument `registrationNo` is missing.\n    at An (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at zn.handleRequestError (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at zn.handleAndLogRequestError (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at zn.request (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async Object.createStudent (file:///C:/Users/Acer/Desktop/school-management-system/src/services/studentService.js:6:12)\n    at async createStudent (file:///C:/Users/Acer/Desktop/school-management-system/src/controllers/studentController.js:11:21)","timestamp":"2025-04-15 08:14:44"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:15:25"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:15:26"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:17:10"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:17:10"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:17:18"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:17:18"}
{"level":"error","message":"PrismaClientValidationError: \nInvalid `prisma.student.findUnique()` invocation:\n\n{\n  where: {\n    regNo: \"STU001\",\n    ~~~~~\n?   id?: String,\n?   registrationNo?: String,\n?   class_rollNo_unique?: StudentClass_rollNo_uniqueCompoundUniqueInput,\n?   AND?: StudentWhereInput | StudentWhereInput[],\n?   OR?: StudentWhereInput[],\n?   NOT?: StudentWhereInput | StudentWhereInput[],\n?   name?: StringFilter | String,\n?   class?: StringFilter | String,\n?   rollNo?: IntFilter | Int,\n?   contactNumber?: StringFilter | String,\n?   status?: BoolFilter | Boolean,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime\n  }\n}\n\nUnknown argument `regNo`. Did you mean `rollNo`? Available options are marked with ?.\n    at An (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at zn.handleRequestError (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at zn.handleAndLogRequestError (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at zn.request (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async Object.getStudentByRegNo (file:///C:/Users/Acer/Desktop/school-management-system/src/services/studentService.js:39:10)\n    at async getStudentByRegNo (file:///C:/Users/Acer/Desktop/school-management-system/src/controllers/studentController.js:30:21)","timestamp":"2025-04-15 08:20:05"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:21:02"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:21:02"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:21:07"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:21:07"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:21:15"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:21:15"}
{"level":"error","message":"ReferenceError: registrationNo is not defined\n    at Object.getStudentByRegNo (file:///C:/Users/Acer/Desktop/school-management-system/src/services/studentService.js:40:14)\n    at getStudentByRegNo (file:///C:/Users/Acer/Desktop/school-management-system/src/controllers/studentController.js:30:42)\n    at Layer.handleRequest (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\lib\\layer.js:152:17)\n    at next (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\lib\\route.js:157:13)\n    at Route.dispatch (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\lib\\route.js:117:3)\n    at handle (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\index.js:435:11)\n    at Layer.handleRequest (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\lib\\layer.js:152:17)\n    at C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\index.js:295:15\n    at param (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\index.js:600:14)\n    at param (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\index.js:610:14)","timestamp":"2025-04-15 08:21:22"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:21:29"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:21:29"}
{"level":"error","message":"ReferenceError: registrationNo is not defined\n    at Object.getStudentByRegNo (file:///C:/Users/Acer/Desktop/school-management-system/src/services/studentService.js:40:14)\n    at getStudentByRegNo (file:///C:/Users/Acer/Desktop/school-management-system/src/controllers/studentController.js:30:42)\n    at Layer.handleRequest (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\lib\\layer.js:152:17)\n    at next (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\lib\\route.js:157:13)\n    at Route.dispatch (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\lib\\route.js:117:3)\n    at handle (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\index.js:435:11)\n    at Layer.handleRequest (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\lib\\layer.js:152:17)\n    at C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\index.js:295:15\n    at param (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\index.js:600:14)\n    at param (C:\\Users\\Acer\\Desktop\\school-management-system\\node_modules\\router\\index.js:610:14)","timestamp":"2025-04-15 08:21:33"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:23:48"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:23:49"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:24:06"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:24:06"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:27:57"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:27:57"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:28:03"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:28:04"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:28:09"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:28:09"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:36:04"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:36:05"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:36:13"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:36:13"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:36:56"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:36:56"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-04-15 08:44:31"}
{"level":"info","message":"Connected to MongoDB via Prisma","timestamp":"2025-04-15 08:44:31"}
